import { useMemo } from "react";
import { Equal, Expect } from "../helpers/type-utils";

export const Component = () => {
  /**
   * if you look at the type doc for useMemo, it's looking for a factory that returns the same type 
   * in the first param as the useMemo return. 
   * the original problem here is that the generic was a function returning string[], which we do 
   * with useCallback...but with useMemo, we simply type just the return.
   * 
   * i.e., useCallback type doc shows function as the param type
   */
  const autoGeneratedIds = useMemo<string[]>(() => {
    // generate 100 random string uuid's
    return Array.from({ length: 100 }, () =>
      Math.random().toString(36).substr(2, 9)
    );
  }, []);

  // we can also type the memo return as `useMemo((): string[] => {}, [])`
  // inference also works, but I prefer to not rely on inference for when its simply wrong.

  type test = Expect<Equal<typeof autoGeneratedIds, string[]>>;
};
